import sys
import numpy as np
import pandas as pd
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget
from PyQt6.QtCharts import QChart, QChartView, QCandlestickSeries, QCandlestickSet, QDateTimeAxis, QValueAxis
from PyQt6.QtCore import Qt, QDateTime, QTimer, QPointF
from PyQt6.QtGui import QColor, QPainter, QPen


class CustomCandlestickSeries(QCandlestickSeries):
    def __init__(self):
        super().__init__()
        self.wick_pen = QPen(QColor("#FFFFFF"))
        self.body_width = 0.6  # Width of candlestick body (0-1)

    def setWickColor(self, color):
        self.wick_pen.setColor(color)

    def draw(self, painter):
        painter.save()
        painter.setPen(self.wick_pen)

        # Calculate candlestick geometry
        plot_area = self.chart().plotArea()
        x_axis = self.chart().axes(Qt.Orientation.Horizontal)[0]
        y_axis = self.chart().axes(Qt.Orientation.Vertical)[0]

        for candlestick in self.sets():
            # Get price values
            o = candlestick.open()
            h = candlestick.high()
            l = candlestick.low()
            c = candlestick.close()
            ts = candlestick.timestamp()

            # Convert to chart coordinates
            x = x_axis.mapValueToPosition(ts)
            y_h = y_axis.mapValueToPosition(h)
            y_l = y_axis.mapValueToPosition(l)
            y_o = y_axis.mapValueToPosition(max(o, c))
            y_c = y_axis.mapValueToPosition(min(o, c))

            # Calculate candlestick width
            time_range = x_axis.max() - x_axis.min()
            candle_width = plot_area.width() / (time_range / self.body_width)

            # Draw wicks
            painter.drawLine(QPointF(x, y_h), QPointF(x, y_l))

            # Draw body (as rectangle)
            body_color = self.increasingColor() if c >= o else self.decreasingColor()
            painter.fillRect(x - candle_width / 2, y_c,
                             candle_width, y_o - y_c, body_color)

        painter.restore()


class CandlestickChartWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Smooth Real-Time Candlestick Chart")
        self.setGeometry(100, 100, 1200, 800)

        self.dark_mode = False  # Theme state

        # Chart configuration
        self.max_visible_points = 30
        self.current_start_time = None
        self.df = self.generate_random_ohlc(self.max_visible_points)
        # ... [keep previous initialization code] ...



        # Use custom series instead of QCandlestickSeries
        self.series = CustomCandlestickSeries()
        self.series.setIncreasingColor(QColor("#4CAF50"))
        self.series.setDecreasingColor(QColor("#F44336"))

        # ... [rest of initialization remains the same] ...
        self.chart = QChart()
        self.chart.addSeries(self.series)
        self.chart.setTitle("Real-Time Stock Prices")
        self.chart.legend().setVisible(False)
        self.chart.setAnimationOptions(QChart.AnimationOption.NoAnimation)

        self.axis_x = QDateTimeAxis()
        self.axis_x.setFormat("HH:mm:ss")
        self.axis_y = QValueAxis()
        self.configure_axes()

        self.chart_view = QChartView(self.chart)
        self.chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)

        self.toggle_theme_button = QPushButton("Toggle Theme") ## "☀️ Light Theme" if self.dark_mode else "🌙 Dark Theme"
        self.toggle_theme_button.clicked.connect(self.toggle_theme)

        layout = QVBoxLayout()
        layout.addWidget(self.toggle_theme_button)
        layout.addWidget(self.chart_view)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_chart)
        self.timer.start(500)

        self.initialize_chart_data()
        self.apply_theme()

    def configure_axes(self):
        self.axis_x.setTitleText("Time")
        self.chart.addAxis(self.axis_x, Qt.AlignmentFlag.AlignBottom)
        self.series.attachAxis(self.axis_x)

        self.axis_y.setTitleText("Price")
        self.chart.addAxis(self.axis_y, Qt.AlignmentFlag.AlignLeft)
        self.series.attachAxis(self.axis_y)

    def generate_random_ohlc(self, n):
        base_time = QDateTime.currentDateTime().addSecs(-n)
        return pd.DataFrame({
            'time': [base_time.addSecs(i) for i in range(n)],
            'open': np.random.normal(100, 5, n).cumsum(),
            'high': np.random.normal(105, 3, n).cumsum(),
            'low': np.random.normal(95, 3, n).cumsum(),
            'close': np.random.normal(100, 4, n).cumsum()
        })

    def initialize_chart_data(self):
        for _, row in self.df.iterrows():
            self.add_candle(row)
        self.update_axis_ranges(initial=True)

    def add_candle(self, row):
        candle = QCandlestickSet(
            row['open'], row['high'], row['low'], row['close']
        )
        candle.setTimestamp(row['time'].toMSecsSinceEpoch())
        self.series.append(candle)

    def update_chart(self):
        new_row = self.generate_new_candle()
        self.df = pd.concat([self.df, new_row], ignore_index=True)
        self.add_candle(new_row.iloc[0])

        if len(self.series) > self.max_visible_points:
            self.series.remove(self.series.sets()[0])

        self.update_axis_ranges()

    def generate_new_candle(self):
        last = self.df.iloc[-1]
        new_time = last['time'].addSecs(1)
        price_change = np.random.normal(0, 0.5)

        return pd.DataFrame([{
            'time': new_time,
            'open': last['close'],
            'high': last['close'] + abs(price_change) + np.random.uniform(0, 0.5),
            'low': last['close'] - abs(price_change) - np.random.uniform(0, 0.5),
            'close': last['close'] + price_change
        }])

    def update_axis_ranges(self, initial=False):
        min_time = self.df['time'].iloc[-self.max_visible_points].toMSecsSinceEpoch()
        max_time = self.df['time'].iloc[-1].toMSecsSinceEpoch()
        visible_df = self.df.iloc[-self.max_visible_points:]
        buffer = 0.05 * (visible_df['high'].max() - visible_df['low'].min())
        y_min = visible_df['low'].min() - buffer
        y_max = visible_df['high'].max() + buffer

        self.axis_x.setRange(
            QDateTime.fromMSecsSinceEpoch(min_time),
            QDateTime.fromMSecsSinceEpoch(max_time)
        )
        self.axis_y.setRange(y_min, y_max)

    def toggle_theme(self):
        self.dark_mode = not self.dark_mode
        self.apply_theme()

    def apply_theme(self):
        if self.dark_mode:
            # Dark theme settings
            self.chart.setBackgroundBrush(QColor("#121212"))
            self.chart.setTitleBrush(QColor("#FFFFFF"))
            self.axis_x.setLabelsBrush(QColor("#FFFFFF"))
            self.axis_y.setLabelsBrush(QColor("#FFFFFF"))
            self.series.setWickColor(QColor("#FFFFFF"))
        else:
            # Light theme settings
            self.chart.setBackgroundBrush(QColor("#FFFFFF"))
            self.chart.setTitleBrush(QColor("#000000"))
            self.axis_x.setLabelsBrush(QColor("#000000"))
            self.axis_y.setLabelsBrush(QColor("#000000"))
            self.series.setWickColor(QColor("#000000"))

        # self.chart_view.update()
        self.chart_view.repaint()

# ... [rest of the class remains unchanged] ...

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("fusion")
    window = CandlestickChartWindow()
    window.show()
    sys.exit(app.exec())
